const Language ocaml {
/*name*/    "ocaml",
/*exts*/    { ".ml", ".mli", ".mll", ".mly" },
/*syntax*/  {
/*hglt types*/       true,
/*hglt consts*/      true,
/*hglt func calls*/  false,
/*fcall any braket*/ false,
/*hglt nums*/        true,
/*string tokens*/    { "\"" },
/*multi strings*/    {},
/*multi comments*/   { { "(*", "*)" }  },
/*single comments*/  {},
/*operators*/        { "+", "-", "*", "/", "=", "!", "~", "<", ">", "?", ":", "&", "%", "|", "^", ";" },
/*syntax ranges*/    {},
/*syntax words*/     { 
						 { "fun", StyleType::KeyWord },
						 { "function", StyleType::KeyWord },
						 { "functor", StyleType::KeyWord },
						 { "match", StyleType::KeyWord },
						 { "try", StyleType::KeyWord },
						 { "with", StyleType::KeyWord },
						 { "let", StyleType::KeyWord },
						 { "val", StyleType::KeyWord },
						 { "class", StyleType::KeyWord },
						 { "method", StyleType::KeyWord },
						 { "in", StyleType::KeyWord },
						 { "and", StyleType::KeyWord },
						 { "rec", StyleType::KeyWord },
						 { "private", StyleType::KeyWord },
						 { "virtual", StyleType::KeyWord },
						 { "constraint", StyleType::KeyWord },
						 { "as", StyleType::KeyWord },
						 { "when", StyleType::KeyWord },
						 { "of", StyleType::KeyWord },
						 { "if", StyleType::KeyWord },
						 { "then", StyleType::KeyWord },
						 { "else", StyleType::KeyWord },
						 { "begin", StyleType::KeyWord },
						 { "end", StyleType::KeyWord },
						 { "object", StyleType::KeyWord },
						 { "struct", StyleType::KeyWord },
						 { "sig", StyleType::KeyWord },
						 { "for", StyleType::KeyWord },
						 { "while", StyleType::KeyWord },
						 { "do", StyleType::KeyWord },
						 { "done", StyleType::KeyWord },
						 { "to", StyleType::KeyWord },
						 { "downto", StyleType::KeyWord },
						 { "incldue", StyleType::KeyWord },
						 { "inherit", StyleType::KeyWord },
						 { "new", StyleType::KeyWord },
						 { "mutable", StyleType::KeyWord },
						 { "lazy", StyleType::KeyWord },
						 { "assert", StyleType::KeyWord },
						 { "raise", StyleType::KeyWord },
						 { "type", StyleType::KeyWord },
						 { "open", StyleType::KeyWord },
						 { "module", StyleType::KeyWord },
						 { "exception", StyleType::KeyWord },
						 { "external", StyleType::KeyWord },
						 { "int", StyleType::Type },
						 { "float", StyleType::Type },
						 { "string", StyleType::Type },
						 { "bool", StyleType::Type },
						 { "unit", StyleType::Type },
						 { "list", StyleType::Type },
						 { "array", StyleType::Type },
						 { "option", StyleType::Type },
						 { "bool", StyleType::Type },
						 { "ref", StyleType::Type },
						 { "true", StyleType::Const },
						 { "false", StyleType::Const },
					 }
			}
};
