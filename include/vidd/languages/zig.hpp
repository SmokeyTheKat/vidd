const Language zig {
/*name*/    "zig",
/*exts*/    { ".zig" },
/*syntax*/  {
/*hglt types*/       true,
/*hglt consts*/      true,
/*hglt func calls*/  true,
/*fcall any braket*/ false,
/*hglt nums*/        true,
/*string tokens*/    { "'", "\"" },
/*multi strings*/    {},
/*multi comments*/   {},
/*single comments*/  { "//" },
/*operators*/        { "+", "-", "*", "/", "=", "!", "~", "<", ">", "?", ":", "&", "%", "|", "^" },
/*syntax ranges*/    {
						 { { Syntax::Range::Type::Until, false, "@", "(" }, StyleType::Macro },
						 { { Syntax::Range::Type::While, true, "i", "0123456789", true }, StyleType::Type },
					 },
/*syntax words*/     { 
						 { "addrspace", StyleType::KeyWord },
						 { "align", StyleType::KeyWord },
						 { "allowzero", StyleType::KeyWord },
						 { "and", StyleType::KeyWord },
						 { "anyframe", StyleType::KeyWord },
						 { "anytype", StyleType::KeyWord },
						 { "asm", StyleType::KeyWord },
						 { "async", StyleType::KeyWord },
						 { "await", StyleType::KeyWord },
						 { "break", StyleType::KeyWord },
						 { "callconv", StyleType::KeyWord },
						 { "catch", StyleType::KeyWord },
						 { "comptime", StyleType::KeyWord },
						 { "const", StyleType::KeyWord },
						 { "continue", StyleType::KeyWord },
						 { "defer", StyleType::KeyWord },
						 { "else", StyleType::KeyWord },
						 { "errdefer", StyleType::KeyWord },
						 { "error", StyleType::KeyWord },
						 { "export", StyleType::KeyWord },
						 { "extern", StyleType::KeyWord },
						 { "fn", StyleType::KeyWord },
						 { "for", StyleType::KeyWord },
						 { "if", StyleType::KeyWord },
						 { "inline", StyleType::KeyWord },
						 { "linksection", StyleType::KeyWord },
						 { "noalias", StyleType::KeyWord },
						 { "noinline", StyleType::KeyWord },
						 { "nosuspend", StyleType::KeyWord },
						 { "opaque", StyleType::KeyWord },
						 { "or", StyleType::KeyWord },
						 { "orelse", StyleType::KeyWord },
						 { "packed", StyleType::KeyWord },
						 { "pub", StyleType::KeyWord },
						 { "resume", StyleType::KeyWord },
						 { "return", StyleType::KeyWord },
						 { "struct", StyleType::KeyWord },
						 { "suspend", StyleType::KeyWord },
						 { "switch", StyleType::KeyWord },
						 { "test", StyleType::KeyWord },
						 { "threadlocal", StyleType::KeyWord },
						 { "try", StyleType::KeyWord },
						 { "union", StyleType::KeyWord },
						 { "unreachable", StyleType::KeyWord },
						 { "usingnamespace", StyleType::KeyWord },
						 { "var", StyleType::KeyWord },
						 { "volatile", StyleType::KeyWord },
						 { "while", StyleType::KeyWord },
						 { "i8", StyleType::Type },
						 { "u8", StyleType::Type },
						 { "i16", StyleType::Type },
						 { "u16", StyleType::Type },
						 { "i32", StyleType::Type },
						 { "u32", StyleType::Type },
						 { "i64", StyleType::Type },
						 { "u64", StyleType::Type },
						 { "i128", StyleType::Type },
						 { "u128", StyleType::Type },
						 { "isize", StyleType::Type },
						 { "usize", StyleType::Type },
						 { "c_char", StyleType::Type },
						 { "c_short", StyleType::Type },
						 { "c_ushort", StyleType::Type },
						 { "c_int", StyleType::Type },
						 { "c_uint", StyleType::Type },
						 { "c_long", StyleType::Type },
						 { "c_ulong", StyleType::Type },
						 { "c_longlong", StyleType::Type },
						 { "c_ulonglong", StyleType::Type },
						 { "c_longdouble", StyleType::Type },
						 { "f16", StyleType::Type },
						 { "f32", StyleType::Type },
						 { "f64", StyleType::Type },
						 { "f80", StyleType::Type },
						 { "f128", StyleType::Type },
						 { "bool", StyleType::Type },
						 { "anyopaque", StyleType::Type },
						 { "void", StyleType::Type },
						 { "noreturn", StyleType::Type },
						 { "type", StyleType::Type },
						 { "anyerror", StyleType::Type },
						 { "comptime_int", StyleType::Type },
						 { "comptime_float", StyleType::Type },
						 { "true", StyleType::Const },
						 { "false", StyleType::Const },
						 { "null", StyleType::Const },
						 { "undefined", StyleType::Const },
					 }
			}
};
