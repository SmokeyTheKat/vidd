const Language csharp {
	"csharp",
	{ ".cs", ".csx" },
	{
		true,
/*hglt consts*/      true,
		true,
		true,
		true,
		{ "'", "\"" },
/*multi strings*/    {},
		{ { "/*", "*/" } },
		{ "//" },
		{ "+", "-", "*", "/", "=", "!", "~", "<", ">", "?", ":", "&", "%", "|", "^" },
		{
			{ { Syntax::Range::Type::UntilLineEnd, true, "#", "" }, StyleType::Macro },
		},
		{ 
			{ "abstract", StyleType::KeyWord },
			{ "default", StyleType::KeyWord },
			{ "as", StyleType::KeyWord },
			{ "base", StyleType::KeyWord },
			{ "break", StyleType::KeyWord },
			{ "case", StyleType::KeyWord },
			{ "catch", StyleType::KeyWord },
			{ "checked", StyleType::KeyWord },
			{ "class", StyleType::KeyWord },
			{ "const", StyleType::KeyWord },
			{ "continue", StyleType::KeyWord },
			{ "delegate", StyleType::KeyWord },
			{ "do", StyleType::KeyWord },
			{ "else", StyleType::KeyWord },
			{ "enum", StyleType::KeyWord },
			{ "event", StyleType::KeyWord },
			{ "explicit", StyleType::KeyWord },
			{ "extern", StyleType::KeyWord },
			{ "finally", StyleType::KeyWord },
			{ "fixed", StyleType::KeyWord },
			{ "for", StyleType::KeyWord },
			{ "foreach", StyleType::KeyWord },
			{ "goto", StyleType::KeyWord },
			{ "if", StyleType::KeyWord },
			{ "implicit", StyleType::KeyWord },
			{ "in", StyleType::KeyWord },
			{ "interface", StyleType::KeyWord },
			{ "internal", StyleType::KeyWord },
			{ "is", StyleType::KeyWord },
			{ "lock", StyleType::KeyWord },
			{ "namespace", StyleType::KeyWord },
			{ "new", StyleType::KeyWord },
			{ "operator", StyleType::KeyWord },
			{ "out", StyleType::KeyWord },
			{ "override", StyleType::KeyWord },
			{ "params", StyleType::KeyWord },
			{ "private", StyleType::KeyWord },
			{ "protected", StyleType::KeyWord },
			{ "public", StyleType::KeyWord },
			{ "readonly", StyleType::KeyWord },
			{ "ref", StyleType::KeyWord },
			{ "return", StyleType::KeyWord },
			{ "sealed", StyleType::KeyWord },
			{ "sizeof", StyleType::KeyWord },
			{ "stackalloc", StyleType::KeyWord },
			{ "static", StyleType::KeyWord },
			{ "struct", StyleType::KeyWord },
			{ "switch", StyleType::KeyWord },
			{ "this", StyleType::KeyWord },
			{ "throw", StyleType::KeyWord },
			{ "try", StyleType::KeyWord },
			{ "typeof", StyleType::KeyWord },
			{ "unchecked", StyleType::KeyWord },
			{ "unsafe", StyleType::KeyWord },
			{ "using", StyleType::KeyWord },
			{ "virtual", StyleType::KeyWord },
			{ "volatile", StyleType::KeyWord },
			{ "while", StyleType::KeyWord },
//            { "add", StyleType::KeyWord },
			{ "alias", StyleType::KeyWord },
			{ "ascending", StyleType::KeyWord },
			{ "async", StyleType::KeyWord },
			{ "await", StyleType::KeyWord },
			{ "by", StyleType::KeyWord },
			{ "descending", StyleType::KeyWord },
//            { "equals", StyleType::KeyWord },
//            { "from", StyleType::KeyWord },
//            { "get", StyleType::KeyWord },
			{ "global", StyleType::KeyWord },
			{ "group", StyleType::KeyWord },
			{ "into", StyleType::KeyWord },
			{ "join", StyleType::KeyWord },
			{ "nameof", StyleType::KeyWord },
			{ "on", StyleType::KeyWord },
			{ "orderby", StyleType::KeyWord },
			{ "partial", StyleType::KeyWord },
//            { "remove", StyleType::KeyWord },
//            { "select", StyleType::KeyWord },
//            { "set", StyleType::KeyWord },
			{ "unmanaged", StyleType::KeyWord },
			{ "value", StyleType::KeyWord },
			{ "when", StyleType::KeyWord },
			{ "where", StyleType::KeyWord },
			{ "yield", StyleType::KeyWord },

			{ "bool", StyleType::Type },
			{ "byte", StyleType::Type },
			{ "char", StyleType::Type },
			{ "decimal", StyleType::Type },
			{ "double", StyleType::Type },
			{ "float", StyleType::Type },
			{ "int", StyleType::Type },
			{ "long", StyleType::Type },
			{ "sbyte", StyleType::Type },
			{ "short", StyleType::Type },
			{ "string", StyleType::Type },
			{ "object", StyleType::Type },
			{ "dynamic", StyleType::Type },
			{ "uint", StyleType::Type },
			{ "ulong", StyleType::Type },
			{ "ushort", StyleType::Type },
			{ "void", StyleType::Type },
			{ "let", StyleType::Type },
			{ "var", StyleType::Type },

			{ "true", StyleType::Type },
			{ "false", StyleType::Type },
			{ "null", StyleType::Type },
		}
	}
};
