#define E_CHARACTERS "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"
#define E_NUMBERS "0123456789"
const Language ket {
/*name*/    "ket",
/*exts*/    { ".ket" },
/*syntax*/  {
/*hglt types*/       true,
/*hglt consts*/      true,
/*hglt func calls*/  true,
/*fcall any braket*/ false,
/*hglt nums*/        true,
/*string tokens*/    { "'", "\"" },
/*multi strings*/    { { "R\"(", ")\"" } },
/*multi comments*/   { 
						 { "/*", "*/" },
						 { "#if 0", "#endif" }
					 },
/*single comments*/  { "//" },
/*operators*/        { "+", "-", "*", "/", "=", "!", "~", "<", ">", "?", ":", "&", "%", "|", "^" },
/*syntax ranges*/    {
						{ { Syntax::Range::Type::While, false, ":", E_CHARACTERS "_" }, StyleType::Function },
						{ { Syntax::Range::Type::While, true, "$", E_CHARACTERS }, StyleType::KeyWord },
						{ { Syntax::Range::Type::While, true, "#", E_CHARACTERS }, StyleType::Macro },
					 },
/*syntax words*/     { 
						 { "xor", StyleType::KeyWord },
						 { "xor_eq", StyleType::KeyWord },
						 { "or", StyleType::KeyWord },
						 { "or_eq", StyleType::KeyWord },
						 { "not", StyleType::KeyWord },
						 { "not_eq", StyleType::KeyWord },
						 { "fn", StyleType::KeyWord },
						 { "var", StyleType::KeyWord },
						 { "let", StyleType::KeyWord },
						 { "self", StyleType::KeyWord },
						 { "overlaod", StyleType::KeyWord },
						 { "locals", StyleType::KeyWord },
						 { "interface", StyleType::KeyWord },
						 { "trait", StyleType::KeyWord },
						 { "and", StyleType::KeyWord },
						 { "and_eq", StyleType::KeyWord },
						 { "bitand", StyleType::KeyWord },
						 { "bitor", StyleType::KeyWord },
						 { "compl", StyleType::KeyWord },
						 { "constinit", StyleType::KeyWord },
						 { "decltype", StyleType::KeyWord },
						 { "explicit", StyleType::KeyWord },
						 { "final", StyleType::KeyWord },
						 { "export", StyleType::KeyWord },
						 { "asm", StyleType::KeyWord },
						 { "goto", StyleType::KeyWord },
						 { "mutable", StyleType::KeyWord },
						 { "noexcept", StyleType::KeyWord },
						 { "requires", StyleType::KeyWord },
						 { "static_assert", StyleType::KeyWord },
						 { "throw", StyleType::KeyWord },
						 { "if", StyleType::KeyWord },
						 { "break", StyleType::KeyWord },
						 { "else", StyleType::KeyWord },
						 { "elif", StyleType::KeyWord },
						 { "in", StyleType::KeyWord },
						 { "match", StyleType::KeyWord },
						 { "then", StyleType::KeyWord },
						 { "for", StyleType::KeyWord },
						 { "continue", StyleType::KeyWord },
						 { "while", StyleType::KeyWord },
						 { "do", StyleType::KeyWord },
						 { "switch", StyleType::KeyWord },
						 { "case", StyleType::KeyWord },
						 { "default", StyleType::KeyWord },
						 { "inline", StyleType::KeyWord },
						 { "sizeof", StyleType::KeyWord },
						 { "typeof", StyleType::KeyWord },
						 { "return", StyleType::KeyWord },
						 { "using", StyleType::KeyWord },
						 { "virtual", StyleType::KeyWord },
						 { "try", StyleType::KeyWord },
						 { "catch", StyleType::KeyWord },
						 { "new", StyleType::KeyWord },
						 { "delete", StyleType::KeyWord },
						 { "reinterpret_cast", StyleType::KeyWord },
						 { "dynamic_cast", StyleType::KeyWord },
						 { "static_cast", StyleType::KeyWord },
						 { "const_cast", StyleType::KeyWord },
						 { "operator", StyleType::KeyWord },
						 { "private", StyleType::KeyWord },
						 { "public", StyleType::KeyWord },
						 { "protected", StyleType::KeyWord },
						 { "friend", StyleType::KeyWord },
						 { "this", StyleType::KeyWord },
						 { "constexpr", StyleType::KeyWord },
						 { "consteval", StyleType::KeyWord },
						 { "concept", StyleType::KeyWord },
						 { "struct", StyleType::Type },
						 { "union", StyleType::Type },
						 { "virtual", StyleType::KeyWord },
						 { "override", StyleType::KeyWord },
						 { "module", StyleType::KeyWord },
						 { "import", StyleType::KeyWord },
						 { "class", StyleType::Type },
						 { "namespace", StyleType::Type },
						 { "template", StyleType::Type },
						 { "typename", StyleType::Type },
						 { "typedef", StyleType::KeyWord },
						 { "typeid", StyleType::KeyWord },
						 { "volatile", StyleType::KeyWord },
						 { "enum", StyleType::Type },
						 { "register", StyleType::KeyWord },
						 { "auto", StyleType::Type },
						 { "inline", StyleType::KeyWord },
						 { "static", StyleType::KeyWord },
						 { "const", StyleType::KeyWord },
						 { "extern", StyleType::KeyWord },
						 { "void", StyleType::Type },
						 { "char", StyleType::Type },
						 { "byte", StyleType::Type },
						 { "bool", StyleType::Type },
						 { "short", StyleType::Type },
						 { "int", StyleType::Type },
						 { "long", StyleType::Type },
						 { "float", StyleType::Type },
						 { "double", StyleType::Type },
						 { "signed", StyleType::Type },
						 { "unsigned", StyleType::Type },
						 { "true", StyleType::Const },
						 { "false", StyleType::Const },
						 { "nullptr", StyleType::Const },
						 { "null", StyleType::Const },
					 }
				 }
};
#undef E_CHARACTERS
#undef E_NUMBERS
